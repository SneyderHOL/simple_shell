.TH SIMPLE_SHELL 1 "16 April 2020" "0.32" "simple_shell Project Man Page" 
.SH NAME
.B simple_shell,
- command interpreter (shell).
.Sh SYNOPSIS             \" Section Header - required - don't modify
.Op Fl abcd              \" [-abcd]
.Op Fl a Ar path         \" [-a path]
.Op Ar file              \" [file]
.Op Ar                   \" [file ...]
.Ar arg0                 \" Underlined argument - use .Ar anywhere to underline
arg2 ...                 \" Arguments
.SH DESCRIPTION

The simple shell program obtains commands provided by a user through Standard Input stream and attempts to execute them by
searching for corresponding built in functions in the shell, or executables present in the operating system and defined in the
environmental variable PATH.

When an error occurs, such as when a command is not found, or it is called with invalid options, a message is produced on the
Standard Error stream, and an exit error number is set accordingly.

.TP
\fB Return (Exit Value) \fR

Upon termination of the simple shell program, an exit value will be set according to the status of the last command
executed. If the command ran succesfuly, the exit value will be zero (0).


If an error was encounter, the values that can be set are:

2 - Errors with options like Illegal number

126 - Command invoked cannot execute

127 - command not found

130 - Control-C


.TP
\fBFORMAT OF COMMAND INPUT\fR

The simple shell can work in two different modes, \fIinteractive\fR and \fInon-interactive\fR. In both modes, commands
can be written with their absolute path or simply their executable name if they exist in one of the folders defined by
PATH.

Example:

\fB/bin/ls\fR is the same as \fBls\fR (ls exists in one of the PATH folders)


.IP \fB-Interactive Mode:\fR

In this condition, the shell will display a prompt ($) that will indicate that the user can provide commands by writing them
with a keyboard. In order to execute the commands the user will need to press the enter key (new line).

Each time a command is executed, the prompt will reappear and wait for a new user input.

Example:

\fB/home/juan/Github/simple_shell$\fR ./hsh

($) ls

AUTHORS               complementary_functions.c  exit_handler.c  hsh     main.c              not_found_cases.c  prompt.c   shell.h           split_in_array.c  str_manipulator.c  _write.c
auxiliar_functions.c  env_handler.c              failed_cases.c  itoa.c  man_1_simple_shell  path_handler.c     README.md  signal_handler.c  split_in_list.c   str_str.c


($)

In order to exit the simple shell, the user must press the combination CTRL + D, as the CTRL + C signal is reserved only for internal script termination and it does not exit the shell.

.IP \fB-Non-interactive Mode:\fR

In this condition, the shell will run commands provided through a pipe at the moment of execution, and will not display a prompt
($) or wait for new user input:

Example:

\fB/home/juan/Github/simple_shell$\fR echo "ls" | ./hsh

AUTHORS               complementary_functions.c  exit_handler.c  hsh     main.c              not_found_cases.c  prompt.c   shell.h           split_in_array.c  str_manipulator.c  _write.c
auxiliar_functions.c  env_handler.c              failed_cases.c  itoa.c  man_1_simple_shell  path_handler.c     README.md  signal_handler.c  split_in_list.c   str_str.c

\fB/home/juan/Github/simple_shell$\fR


.TP
\fBArguments\fR

Most commands have several options or arguments that can be used when executing the program. In order for the Shell to recognize
those parameters, the user must separate everything with spaces.

Example:


\fB/home/juan/Github/simple_shell$\fR ./hsh

($) ls -l /tmp

total 0

($)

or

\fB/home/juan/Github/simple_shell$\fR echo "ls -l /tmp" | ./hsh

total 0

\fB/home/juan/Github/simple_shell$\fR

.TP
\fBBuiltins\fR

.RS
simple shell has some commands that run internally when executed and don't depend on external programs.

.IP \fBexit\fR

This command is used for exiting the shell and can be used in two formats:

($) exit

or

($) exit status (Where status is an integer number)

If no status is provided, the shell will exit with the value of the last
encountered error or zero (0) if no error was ever encountered.


.IP \fBenv\fR

(Environment) This command is used for displaying the system's current environment in the format variable=value.

Its use is fairly simple:

($) env

with no options.


($) help help


.RE
.TP
\fBSearch and Execution\fR

The simple shell will always have the same order of search an execution.

When a command is written and given to the Shell, the Shell will initially check if the command is a built in. If the
condition is met, then the command will be executed internally, and the prompt will be displayed again.


If a builtin command is not found, one of two things happen:

\fB1.\fR Command names containing a slash are simply executed without performing any searches.

\fB2.\fR The shell searches each entry in the environmental variable PATH for the command.  The value of the
PATH variable should be a series of entries separated by colons.  Each entry consists of a directory name.
The current directory may be indicated implicitly by an empty directory name, or explicitly by a single period.

If the command is found in the PATH, then its executable is run in a sub-process, also called child process, so that
after its termination, the Shell does not exit.

If the command is not found, then the Shell will display an error indicating the issue. The Shell will also
keep track of the command count and display it when the error appears.


.SH GENERAL EXAMPLES

.RE


.IP \fBInteractive Mode\fR


\fB/home/juan/Github/simple_shell$\fR ./hsh

($) ls

AUTHORS               complementary_functions.c  exit_handler.c  hsh     main.c              not_found_cases.c  prompt.c   shell.h           split_in_array.c  str_manipulator.c  _write.c
auxiliar_functions.c  env_handler.c              failed_cases.c  itoa.c  man_1_simple_shell  path_handler.c     README.md  signal_handler.c  split_in_list.c   str_str.c


($) ls -l

-rw-r--r-- 1 juan juan   163 Apr 16 10:22 AUTHORS

-rw-r--r-- 1 juan juan  2586 Apr 16 12:53 auxiliar_functions.c

-rw-r--r-- 1 juan juan  1856 Apr 16 10:22 complementary_functions.c

-rw-r--r-- 1 juan juan   853 Apr 16 17:45 env_handler.c

-rw-r--r-- 1 juan juan  2974 Apr 16 10:22 exit_handler.c

-rw-r--r-- 1 juan juan  1204 Apr 16 10:22 failed_cases.c

-rwxr-xr-x 1 juan juan 28288 Apr 16 17:45 hsh

-rw-r--r-- 1 juan juan  1649 Apr 16 10:22 itoa.c

-rw-r--r-- 1 juan juan   300 Apr 16 10:22 main.c

-rw-r--r-- 1 juan juan  8652 Apr 16 18:11 man_1_simple_shell

-rw-r--r-- 1 juan juan  1823 Apr 16 10:22 not_found_cases.c

-rw-r--r-- 1 juan juan  4247 Apr 16 17:19 path_handler.c

-rw-r--r-- 1 juan juan  2509 Apr 16 17:19 prompt.c

-rw-r--r-- 1 juan juan  5812 Apr 16 11:41 README.md

-rw-r--r-- 1 juan juan  4074 Apr 16 17:19 shell.h

-rw-r--r-- 1 juan juan   520 Apr 16 10:22 signal_handler.c

-rw-r--r-- 1 juan juan  1744 Apr 16 17:19 split_in_array.c

-rw-r--r-- 1 juan juan  2261 Apr 16 10:22 split_in_list.c

-rw-r--r-- 1 juan juan  1834 Apr 16 10:22 str_manipulator.c

-rw-r--r-- 1 juan juan  1109 Apr 16 10:22 str_str.c

-rw-r--r-- 1 juan juan   896 Apr 16 10:22 _write.c


($) echo Hello

Hello

($) qwerty

\ ./hsh: 4: qwerty: not found

($) env

GJS_DEBUG_TOPICS=JS ERROR;JS LOG

LANGUAGE=en_US:en

USER=juan

LC_TIME=en_US.UTF-8

SSH_AGENT_PID=1791

XDG_SESSION_TYPE=x11

SHLVL=1

QT4_IM_MODULE=ibus

HOME=/home/juan

OLDPWD=/home/juan/Github/simple_shell

LESS=-R

DESKTOP_SESSION=pop

ZSH=/home/juan/.oh-my-zsh

LSCOLORS=Gxfxcxdxbxegedabagacad

GTK_MODULES=gail:atk-bridge:appmenu-gtk-module

GNOME_SHELL_SESSION_MODE=pop

.B continue printing ...

($) exit

\fB/home/juan/Github/simple_shell$\fR

.IP \fBNon-interactive Mode\fR

\fB/home/juan/Github/simple_shell$\fR echo "ls" | ./hsh

AUTHORS		      complementary_functions.c  exit_handler.c  hsh	 main.c		     not_found_cases.c	prompt.c   shell.h	     split_in_array.c  str_manipulator.c  _write.c
auxiliar_functions.c  env_handler.c		 failed_cases.c  itoa.c  man_1_simple_shell  path_handler.c	README.md  signal_handler.c  split_in_list.c   str_str.c

\fB/home/juan/Github/simple_shell$\fR echo "ls -l" | ./hsh

rw-r--r-- 1 juan juan   163 Apr 16 10:22 AUTHORS

rw-r--r-- 1 juan juan  2586 Apr 16 12:53 auxiliar_functions.c

rw-r--r-- 1 juan juan  1856 Apr 16 10:22 complementary_functions.c

rw-r--r-- 1 juan juan   853 Apr 16 17:45 env_handler.c

rw-r--r-- 1 juan juan  2974 Apr 16 10:22 exit_handler.c

rw-r--r-- 1 juan juan  1204 Apr 16 10:22 failed_cases.c

rwxr-xr-x 1 juan juan 28288 Apr 16 17:45 hsh

-rw-r--r-- 1 juan juan  1649 Apr 16 10:22 itoa.c

-rw-r--r-- 1 juan juan   300 Apr 16 10:22 main.c

.B continue printing ...


\fB/home/juan/Github/simple_shell$\fR echo "qwerty" | ./hsh

\ ./hsh: 1: qwerty: not found

\fB/home/juan/Github/simple_shell$\fR


.SH BUGS
please report to: (1507@holbertonschool.com) or (1074@holbertonschool.com)

.SH AUTHOR
Sneyder Amador (1507@holbertonschool.com)

Juan Rengifo (1074@holbertonschool.com)
